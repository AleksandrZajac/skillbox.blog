policy

В вапианте авторизации используем для того чтобы другой пользователь не мог отредактировать наши файлы создаем

php artisan make:policy ArticlePolicy --model=Article

регестрируем политику в Providers/AuthServiceProvider.php

Теперь можем воспользоваться политикой в контроллере Article методе edit

$this->authorize('update', $article);

Есть еще дирректива в blade пример в

@can('update', $article)
    <h5 class="pt-2">
        <a class="btn btn-primary" href="{{ route('articles.edit', $article->slug) }}">
            Редактировать статью
        <a>
    </h5>
@endcan

которая тоже использует политику.

Предоставим все права пользователя пользователю с id = 1, для этого в AuthServiceProvider в методе boot
используем фасад \Illuminate\Contracts\Auth\Access\Gate

    public function boot(\Illuminate\Contracts\Auth\Access\Gate $gate)
    {
        $this->registerPolicies();

        $gate->before(function ($user) {
            if ($user->id == 1) {
                return true;
            }
        });
    }

создаем метод article() в модели User

     public function articles()
    {
        return $this->hasMany(Article::class, 'owner_id');
    }

для выполнения в контроллере ArticleController

$articles = auth()->user()->articles()->with('tags')->latest()->get();
